/*
Problem 2 - Even Fibonacci Numbers

Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even valued terms.
*/

package main

import (
	"fmt"
	"time"
)

func main() {
	fmt.Println("ProjectEuler Problem 2")

	t0 := time.Now()
	ans := method1(4000000)
	t1 := time.Now()
	fmt.Printf("Method 1:%d (%dns)\n", ans, t1.Sub(t0).Nanoseconds())

	t0 = time.Now()
	ans = method2(4000000)
	t1 = time.Now()
	fmt.Printf("Method 2:%d (%dns)\n", ans, t1.Sub(t0).Nanoseconds())
}

func method1(limit int) (sum int64) {
	// Naive implementation

	first := 1
	second := 2
	sum = int64(second)
	var third int
	for third < limit {
		third = first + second
		if third%2 == 0 {
			sum += int64(third)
		}
		first = second
		second = third
	}

	return
}

func method2(limit int) (sum int64) {
	// The Fibonacci sequence of has the following pattern of odd/even numbers...
	// O,E,O,O,E,O,O,E,O,O,E...
	// Using this knowledge we can simply iterate to the even numbers without having to check
	return
}
